/// <reference types="node" />
import { BufferObject } from '../buffer-fetcher/types';
export declare type CacheManifest = Record<string, true>;
export declare type CacheItem = {
    cacheKey: string;
    buffer: Buffer;
};
export declare type CacheKeyFormatter = (input: string) => string;
export declare const DEFAULT_CACHE_FOLDER = ".dukascopy-cache";
export declare const DEFAULT_MANIFEST_FILE = "manifest.json";
export interface CacheManagerBase {
    readItemFromCache(item: string): Promise<Buffer | null>;
    writeItemsToCache(items: BufferObject[]): Promise<void[]>;
    purgeCache(): Promise<void>;
    getCacheKeyFromUrl: CacheKeyFormatter;
}
export declare class CacheManager implements CacheManagerBase {
    cacheManifest: CacheManifest;
    cacheManifestPath: string;
    cacheFolderPath: string;
    cacheKeyFormatter: CacheKeyFormatter;
    constructor({ cacheFolderPath, cacheKeyFormatter }: {
        cacheFolderPath?: string;
        cacheKeyFormatter?: CacheKeyFormatter;
    });
    readItemFromCache(url: string): Promise<Buffer | null>;
    writeItemsToCache(items: BufferObject[]): Promise<void[]>;
    purgeCache(cacheFolderPath?: string): Promise<void>;
    getCacheKeyFromUrl(url: string): string;
}
