import { Config } from '../config';
import { ValidationError } from 'fastest-validator';
import { InputSchema } from './schema';
export declare type ConfigValidationError = Pick<ValidationError, 'message' | 'expected' | 'actual'>;
export declare type SanitizedConfig<InputConfig extends Config> = Required<Omit<InputConfig, 'dates'>> & {
    dates: {
        from: Date;
        to: Date;
    };
};
export interface ValidateConfigOutput<InputConfig extends Config> {
    input: SanitizedConfig<InputConfig>;
    isValid: boolean;
    validationErrors: ConfigValidationError[];
}
/**
 *
 * Validates the config and sanitizes some of the params
 *
 */
export declare function validateConfig<InputConfig extends Config>(input: InputConfig, schema: InputSchema<InputConfig>): ValidateConfigOutput<InputConfig>;
export declare function validateConfigNode(input: Config): ValidateConfigOutput<Config>;
