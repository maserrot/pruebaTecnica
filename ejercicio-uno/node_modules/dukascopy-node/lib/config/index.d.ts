import { PriceType } from './price-types';
import { TimeframeType } from './timeframes';
import { FormatType } from './format';
import { InstrumentType } from './instruments';
import { OptionalKeys } from 'utility-types';
export declare type DateInput = string | Date | number;
export interface Config {
    instrument: InstrumentType;
    dates: {
        from: DateInput;
        to: DateInput;
    };
    timeframe?: TimeframeType;
    priceType?: PriceType;
    utcOffset?: number;
    volumes?: boolean;
    ignoreFlats?: boolean;
    format?: FormatType;
    batchSize?: number;
    pauseBetweenBatchesMs?: number;
    useCache?: boolean;
    cacheFolderPath?: string;
    retryCount?: number;
    pauseBetweenRetriesMs?: number;
}
export declare type DefaultConfig = Required<Pick<Config, OptionalKeys<Config>>>;
export declare const defaultConfig: DefaultConfig;
export interface ConfigArrayTickItem extends Config {
    timeframe?: 'tick';
    format?: 'array';
}
export interface ConfigArrayItem extends Config {
    timeframe?: Exclude<TimeframeType, 'tick'> | undefined;
    format?: 'array';
}
export interface ConfigJsonTickItem extends Config {
    timeframe?: 'tick';
    format?: 'json';
}
export interface ConfigJsonItem extends Config {
    timeframe?: Exclude<TimeframeType, 'tick'>;
    format?: 'json';
}
export interface ConfigCsvItem extends Config {
    format?: 'csv';
}
